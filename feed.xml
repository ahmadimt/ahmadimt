<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>imteyazahmad.com</title>
    <link href="https://imteyazahmad.com/feed.xml" rel="self" />
    <link href="https://imteyazahmad.com" />
    <updated>2021-04-22T21:38:07+05:30</updated>
    <author>
        <name>Imteyaz Ahmad</name>
    </author>
    <id>https://imteyazahmad.com</id>

    <entry>
        <title>Elasticsearch: Get Document Counts using Java High Level Rest Client</title>
        <author>
            <name>Imteyaz Ahmad</name>
        </author>
        <link href="https://imteyazahmad.com/elasticsearch-get-document-counts-using-java-high-level-rest-client/"/>
        <id>https://imteyazahmad.com/elasticsearch-get-document-counts-using-java-high-level-rest-client/</id>
            <category term="high level rest client"/>
            <category term="Java"/>
            <category term="Elasticsearch"/>

        <updated>2021-04-22T21:38:07+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://imteyazahmad.com/media/posts/8/hand-162127.png" alt="" />
                     We can use&nbsp;Java High Level Rest Client to get the count&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://imteyazahmad.com/media/posts/8/hand-162127.png" alt="" />
                
  <p>
    We can use&nbsp;Java High Level Rest Client to get the count of documents in an index. It can also be used to execute a query and get the count of matching documents.
  </p>

    <h2 id="introduction">
      Introduction
    </h2>

  <p>
    The Elasticsearch Java High Level Rest Client provides <code>count API</code> which can be used to get the followings:
  </p>

  <ul>
    <li>Total number of documents in the indices or</li><li>Number of documents matching a query.</li>
  </ul>

    <h2 id="query-building">
      Query Building
    </h2>

  <p>
    In our previous <a href="https://imteyazahmad.com/elasticsearch-bulk-insert-using-java-high-level-rest-client/" class="">post</a> we used account data and inserted in <code>accounts</code> index. I want to know the number of documents where the first name of the account holder is&nbsp;<mark>Kelley</mark>. The following code shows the <code>JSON</code> query for the same:
  </p>
<pre class="line-numbers  language-bash"><code>#Number of accounts with Firstname as Kelley
POST accounts/_count
{"query":{"match":{"firstname.keyword":"Kelley"}}}
</code></pre>

  <p>
    For achieving the same using Java High Level Rest Client, we can build the query as shown below:
  </p>
<pre class="line-numbers  language-java"><code>final var countRequest = new CountRequest("accounts");
countRequest.query(QueryBuilders.matchQuery("firstname.keyword", "Kelley")); 
</code></pre>

    <h2 id="query-execution">
      Query Execution
    </h2>

  <p>
    After this we can use High Level Rest Client to execute the query as following. For configuring the client please follow <a href="https://imteyazahmad.com/configuring-elasticsearch-java-high-level-rest-client-2/">this post</a>.
  </p>
<pre class="line-numbers  language-java"><code>final var countResponse = restHighLevelClient.count(countRequest, RequestOptions.DEFAULT);
final var count = countResponse.getCount(); </code></pre>

  <p>
    A working code example is present in this <a href="https://github.com/ahmadimt/elasticsearch_samples/tree/main/count_high_level_rest_client">git repository.</a> I hope it is useful for you. Happy learning :).
  </p>

    <h2 id="references">
      References
    </h2>

  <ul>
    <li>https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.12/java-rest-high-count.html<br></li><li><span style="color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);">https://pixabay.com/vectors/hand-counting-fingers-one-two-162127/</span><br></li>
  </ul>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Elasticsearch: A Short Introduction to Ingest Pipelines</title>
        <author>
            <name>Imteyaz Ahmad</name>
        </author>
        <link href="https://imteyazahmad.com/elasticsearch-pre-indexing-transformation-using-ingest-pipelines/"/>
        <id>https://imteyazahmad.com/elasticsearch-pre-indexing-transformation-using-ingest-pipelines/</id>
            <category term="ingest pipeline"/>
            <category term="Java"/>
            <category term="Elasticsearch"/>

        <updated>2021-04-12T19:33:34+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://imteyazahmad.com/media/posts/7/digitization-5140055_1920.jpg" alt="" />
                     While indexing data we need to apply some changes that are&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://imteyazahmad.com/media/posts/7/digitization-5140055_1920.jpg" alt="" />
                
  <p id="introduction">
    While indexing data we need to apply some changes that are common to all the documents. We can achieve that with some custom logic while indexing the documents. However, that can take more efforts and can be error prone. Elasticsearch also provide an inbuilt functionality called <code>Ingest Pipelines</code> to achieve some of the transformation.
  </p>

    <h2 id="introduction">
      Introduction
    </h2>

  <p>
    Ingest pipelines provide mean to apply some common transformations before indexing the document. e.g If we want to set a field called&nbsp;<code>writeTime</code> in each of the document or converting a field to uppercase.
  </p>

    <h3 id="prerequisite">
      Prerequisite
    </h3>

  <p>
    The minimum requirement to use ingest pipeline is at least one of the nodes in the cluster must be an <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html" target="_blank"><code>ingest</code></a> node. For more details please follow <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html#ingest-prerequisites" target="_blank" rel="nofollow noopener">this</a>.
  </p>

    <h2 id="ingest-pipeline-structure">
      Ingest Pipeline Structure
    </h2>

  <p>
    The following block shows the structure of an ingest pipeline. The description is optional and then we can define a list of one or more <code>processors</code>. A&nbsp;processor is configurable task.&nbsp;
  </p>
<pre class="line-numbers  language-json"><code>{
  "description" : "This is optional",
  "processors": [
    {
      //processor 1
    },
    {
     //processor 2
    }
    //
  ]
}
</code></pre>

  <p>
    These processors run sequentially.&nbsp;
  </p>

    <h2 id="use-case">
      Use case
    </h2>

  <p>
    We need to add a field called <code>writeTime</code> in each document of an index in the Elasticsearch. The following pipeline achieves the same:
  </p>
<pre class="line-numbers  language-json"><code>PUT _ingest/pipeline/write_time_pipeline
{
  "description": "Pipeline to add writeTime in the documents",
  "processors": [
    {
      "set": {
        "field": "writeTime",
        "value": "{{_ingest.timestamp}}"
      }
    }
}
</code></pre>

  <p>
    Once this is done we can use this pipeline in index request as shown below:
  </p>
<pre class="line-numbers  language-json"><code>POST my-events/_doc?pipeline=write_time_pipeline
{
  "reason": "foo"
}</code></pre>

  <p>
    If you are using Java High Level Rest Client then we can use as following:
  </p>
<pre class="line-numbers  language-java"><code>final Map&lt;Sring, Object&gt; source = new HashMap&lt;&gt;();
source.put("reason","foo")
IndexRequest indexRequest = new IndexRequest("my-events");
// we are setting the pipeline here to the request
indexRequest.setPipeline("write_time_pipeline");
indexRequest.source(source);
restHighLevelClient.index(indexRequest,RequestOptions.DEFAULT);
</code></pre>

  <p>
    Elasticsearch provides a lot of processors.To get a list of available processors we can use node info API as shown below or a detailed list can be found <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/processors.html" target="_blank" rel="nofollow noopener">here</a>.
  </p>
<pre class="line-numbers  language-bash"><code>curl -X GET "localhost:9200/_nodes/ingest?filter_path=nodes.*.ingest.processors&pretty"
</code></pre>

  <p>
    I hope this is helpful. If you have any feedback, please feel free to comment.
  </p>

    <h2 id="references">
      References
    </h2>

  <ul>
    <li>https://pixabay.com/illustrations/digitization-transformation-binary-5140055/</li><li>https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html<br></li><li>https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html<br></li><li>https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html#ingest-prerequisites<br></li><li>https://www.elastic.co/guide/en/elasticsearch/reference/master/put-pipeline-api.html<br></li><li>https://www.elastic.co/guide/en/elasticsearch/reference/master/processors.html<br></li>
  </ul>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Elasticsearch: Bulk Insert using Java High Level Rest Client</title>
        <author>
            <name>Imteyaz Ahmad</name>
        </author>
        <link href="https://imteyazahmad.com/elasticsearch-bulk-insert-using-java-high-level-rest-client/"/>
        <id>https://imteyazahmad.com/elasticsearch-bulk-insert-using-java-high-level-rest-client/</id>
            <category term="high level rest client"/>
            <category term="Java"/>
            <category term="Elasticsearch"/>

        <updated>2021-04-15T20:09:38+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://imteyazahmad.com/media/posts/6/dance-schools-1837658_cropped-2.jpg" alt="" />
                     In our previous post, we saw how to insert data into&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://imteyazahmad.com/media/posts/6/dance-schools-1837658_cropped-2.jpg" alt="" />
                
  <p id="introduction">
    In our <a href="https://imteyazahmad.com/elasticsearch-searching-using-java-high-level-rest-client/" target="_blank">previous post</a>, we saw how to insert data into Elasticsearch using the&nbsp;<code>curl</code> command. In this post, we will use Java High Level Rest Client to achieve the same.
  </p>

    <h2 id="introduction">
      Introduction
    </h2>

  <p>
    For any use case, data is essential. If we already have some data in&nbsp;Elasticsearch, we can use it. Otherwise, we will have to insert some data into it. In this post, we will see how to bulk insert data using Java High Level Rest Client. The details about instantiating and configuring&nbsp;the client can be found <a href="https://imteyazahmad.com/configuring-elasticsearch-java-high-level-rest-client-2/" target="_blank">here</a>.
  </p>

    <h2 id="data-preparation">
      Data Preparation
    </h2>

  <p>
    We will use the accounts data present <a href="https://github.com/ahmadimt/elasticsearch_samples/blob/main/bulk_insert/app/src/main/resources/accounts.json" target="_blank" rel="nofollow noopener" class="">here</a>. The following represents a single document in the <code>accounts</code> index in Elasticsearch:
  </p>
<pre class="line-numbers  language-json"><code>{"account_number":1,"balance":39225,"firstname":"Amber","lastname":"Duke","age":32,"gender":"M","address":"880 Holmes Lane","employer":"Pyrami","email":"amberduke@pyrami.com","city":"Brogan","state":"IL"}</code></pre>

    <h2 id="writing-datanbsp">
      Writing Data&nbsp;
    </h2>

  <p>
    Let's create an <code>Account</code> class that represents a single document as shown above in the index.&nbsp;
  </p>
<pre class="line-numbers  language-java"><code>public class Account {     
private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();   
@JsonProperty("account_number")
private long accountNumber;
@JsonProperty("balance")
private long balance;
@JsonProperty("firstname")
private String firstname;
@JsonProperty("lastname")
private String lastname;
@JsonProperty("age")
private int age;
@JsonProperty("gender")
private String gender;
@JsonProperty("address")
private String address;
@JsonProperty("employer")
private String employer;
@JsonProperty("email")
private String email;
@JsonProperty("city")
private String city;
@JsonProperty("state")
private String state;
//Getter and Setter removed for brevity

// This method is used to convert an instance of Account class to map. 
// This is done because IndexRequest accepts a map as a source.
public static Map&lt;String, Object&gt; getAsMap(final Account account) {
  return OBJECT_MAPPER.convertValue(account, new TypeReference&lt;Map&lt;String, Object&gt;&gt;() {
      });
  }  
}

</code></pre>

  <p>
    We have one another class called <code>AccountManager</code> which reads the data from the file and writes into the Elasticsearch index:
  </p>
<pre class="line-numbers  language-java"><code>/**
 * The type Account manager.
 */
public class AccountManager {

  private final RestHighLevelClient restHighLevelClient;

  /**
   *     Instantiates a new Account manager.
   *
   * @param restHighLevelClient the rest high level client
   */
  public AccountManager(final RestHighLevelClient restHighLevelClient) {
    this.restHighLevelClient = restHighLevelClient;
  }

  /**
   * Read data from the file and return as a List&lt;Account&gt;.
   *
   * @param fileName the file name
   * @return the list
   * @throws IOException the io exception
   */
  public List&lt;Account&gt; readAccounts(String fileName) throws IOException {
    final File file = new File(fileName);
    final Account[] accounts = new ObjectMapper().readValue(file, Account[].class);
    return Arrays.asList(accounts);
  }

  /**
   * Write accounts data into Elasticsearch
   *
   * @param accounts  the accounts
   * @param indexName the index name
   * @return the bulk response
   * @throws IOException the io exception
   */
  public BulkResponse writeAccounts(List&lt;Account&gt; accounts, String indexName) throws IOException {
    final var bulkRequest = new BulkRequest();
    accounts.forEach(account -&gt; {
      final var indexRequest = new IndexRequest(indexName);
      indexRequest.source(Account.getAsMap(account));
      bulkRequest.add(indexRequest);
    });
    return restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);
  }
}
</code></pre>

  <p>
    The important thing to notice here is how we are creating the <code>BulkRequest</code> (Line#39-44). For each <code>Account</code> in the list, we are creating a new <code>IndexRequest</code> with the given index name and then passing the current account data as a map to it, which is then added to the instance of bulk request.
  </p>

  <p>
    Once the bulk request is prepared we are calling&nbsp;<code>restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT)</code> to insert data into Elasticsearch.
  </p>

    <h2 id="testingnbsp">
      Testing&nbsp;
    </h2>

  <p>
    The following is a test to write data into Elasticsearch:
  </p>
<pre class="line-numbers  language-java"><code>  @Test
  public void writeAccountsValidAccountAndIndexNameShouldReturnBulkResponse() throws IOException {
    final URL resource = AccountManager.class.getClassLoader()
        .getResource("accounts.json");
    Assertions.assertThat(resource).isNotNull();
    final List&lt;Account&gt; accounts = accountManager.readAccounts(resource.getFile());
    final var bulkItemResponses = accountManager.writeAccounts(accounts, "accounts_test");
    Assertions.assertThat(bulkItemResponses.hasFailures()).isFalse();
    Assertions.assertThat(bulkItemResponses).isNotEmpty().hasSize(1000);
  }</code></pre>

    <h2 id="references">
      References
    </h2>

  <ul>
    <li>https://pixabay.com/photos/dance-schools-mosquitoes-mass-1837658/?download</li><li>https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json<br></li><li>https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high.html<br></li>
  </ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Elasticsearch: Query using Java High Level Rest Client</title>
        <author>
            <name>Imteyaz Ahmad</name>
        </author>
        <link href="https://imteyazahmad.com/elasticsearch-searching-using-java-high-level-rest-client/"/>
        <id>https://imteyazahmad.com/elasticsearch-searching-using-java-high-level-rest-client/</id>
            <category term="high level rest client"/>
            <category term="Java"/>
            <category term="Elasticsearch"/>
            <category term="Analytics"/>

        <updated>2021-04-15T20:10:27+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://imteyazahmad.com/media/posts/4/hand-1248053_1920-2.jpg" alt="" />
                     In the previous post we saw how to configure Elasticsearch Java&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://imteyazahmad.com/media/posts/4/hand-1248053_1920-2.jpg" alt="" />
                
  <p>
    In the <a href="https://imteyazahmad.com/configuring-elasticsearch-java-high-level-rest-client-2/">previous post</a> we saw how to configure Elasticsearch Java high level rest client. In this post we are going to discuss how to make search request using the same.
  </p>

    <h2 id="introduction">
      Introduction
    </h2>

  <p>
    Once we have configured our Elasticsearch Java high level rest client, it won't be useful if we don't make it work. Here we are going to use it to make some queries and see the result. We will use some fake data here.
  </p>

    <h5 id="adding-data">
      Adding Data
    </h5>

  <p>
    We can download data from <a href="https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json" target="_blank" rel="nofollow noopener">Elasticsearch repository</a>. If you are using Linux the we can download the data as shown&nbsp; below:
  </p>
<pre class="line-numbers  language-java"><code>wget https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json?raw=true -O accounts.json     
</code></pre>

  <p>
    Once downloaded, run the below commands to insert data into Elasticsearch&nbsp;
  </p>
<pre class="line-numbers  language-bash"><code># Create an index named "accounts"
curl XPUT http://localhost:9200/accounts
# Bulk insert data into this index
curl -s -H "Content-Type: application/x-ndjson" -XPOST http://localhost:9200/accounts/_bulk --data-binary @accounts.json
# once this is done we can verify the data
curl -XGET http://localhost:9200/accounts/_count
#this should return something like this  
{"count":1000,"_shards":{"total":1,"successful":1,"skipped":0,"failed":0}}
</code></pre>

    <h2 id="query-preparation-and-execution">
      Query Preparation and Execution
    </h2>

  <p>
    With the data in place we want to know the followings:
  </p>

  <ul>
    <li>How many users have balance between 1000-2000?</li>
  </ul>

  <p>
    First let's see the JSON query for the same:
  </p>
<pre class="line-numbers  language-json"><code>POST accounts/_search
{"size":10000,"query":{"bool":{"filter":[{"range":{"balance":{"gte":1000,"lte":2000}}}]}},"sort":[{"balance":{"order":"desc"}}]}</code></pre>

  <p>
    Now, we will create the same query using Elasticsearch high level rest client.
  </p>
<pre class="line-numbers  language-java"><code>//First we need a bool query with a range filter
final var boolQueryBuilder = QueryBuilders.boolQuery();
    boolQueryBuilder
        .filter(QueryBuilders.rangeQuery("balance")
                .gte(1000).lte(2000)
                .includeLower(true)
                .includeUpper(false));

//After this we provide this to SearchSourceBuilder
final var searchSourceBuilder = new SearchSourceBuilder();
searchSourceBuilder.size(1000);
searchSourceBuilder.query(boolQueryBuilder);
searchSourceBuilder.sort("balance");

//And pass this source  builder to search request
final var searchRequest = new SearchRequest();
searchRequest.indices("accounts");
searchRequest.source(searchSourceBuilder);

</code></pre>

  <p>
    Once that's done, we need to use the <code>HighLevelRestClient</code> to call Elasticsearch
  </p>
<pre class="line-numbers  language-json"><code>final ElasticsearchConfig elasticsearchConfig = new ElasticsearchConfig();
final RestHighLevelClient restHighLevelClient = elasticsearchConfig.restHighLevelClient();
final var searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);
</code></pre>

  <p>
    After this we can parse the result as shown below:
  </p>
<pre class="line-numbers  language-java"><code>final var hits = searchResponse.getHits().getHits();
final var customers = Arrays.stream(hits)
        .map(SearchHit::getSourceAsMap)
        // Here we are mapping the data to string. you can also map to some object like Account
        .map(stringObjectMap -&gt; "Name: " + stringObjectMap.get("firstname") + " "
            + stringObjectMap.get("lastname") + ", Balance: " + stringObjectMap.get("balance"))
        .collect(Collectors.toList());</code></pre>

  <p>
    A working code example is present in this <a href="https://github.com/ahmadimt/elasticsearch_samples/tree/main/query_high_level_rest_client" target="_blank">git repository</a>.
  </p>

    <h2 id="references">
      References
    </h2>

  <ul>
    <li>https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json</li><li>https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1248053</li><li>https://qbox.io/blog/understanding-bulk-indexing-in-elasticsearch/<br></li><li>https://pixabay.com/illustrations/hand-magnifying-glass-earth-globe-1248053/<br></li>
  </ul>

  <p>
    
  </p>

  <p>
    
  </p>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Elasticsearch: Java High Level Rest Client</title>
        <author>
            <name>Imteyaz Ahmad</name>
        </author>
        <link href="https://imteyazahmad.com/configuring-elasticsearch-java-high-level-rest-client-2/"/>
        <id>https://imteyazahmad.com/configuring-elasticsearch-java-high-level-rest-client-2/</id>
            <category term="high level rest client"/>
            <category term="Java"/>
            <category term="Elasticsearch"/>

        <updated>2021-04-11T09:44:01+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://imteyazahmad.com/media/posts/3/ball-563972_1920-2.jpg" alt="" />
                     This article describe how to configure the new Elasticsearch Java High&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://imteyazahmad.com/media/posts/3/ball-563972_1920-2.jpg" alt="" />
                
  <p>
    This article describe how to configure the new Elasticsearch Java High level rest client in a Java Application.
  </p>

    <h2 id="introduction">
      Introduction
    </h2>

  <p>
    Elasticsearch&nbsp;5.0.0 released it first&nbsp;Java REST Client. This client was called low-level client as the Java users had to build the JSON request and parse the results. Later, Elasticsearch 5.6 introduced&nbsp;&nbsp;Java High Level REST Client which accepts&nbsp;request objects and returns response objects for the most important APIs(info, get, index, delete, update, bulk, search, search-scroll, and clear-scroll). For other APIs, we still have to use the low-level client.
  </p>

    <h2 id="dependencies">
      Dependencies
    </h2>

  <p>
    It depends of the following artifacts and their transitive dependencies:<br>
  </p>

  <ul>
    <li>org.elasticsearch.client:elasticsearch-rest-client</li><li>org.elasticsearch:elasticsearch<br></li>
  </ul>

  <p>
    The minimum Java version required is <code>1.8</code>.&nbsp;
  </p>

  <p>
    If you are using maven then it can declared as follows
  </p>
<pre class="line-numbers  language-java"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;
    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;
    &lt;version&gt;${elasticsearch.version}&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

  <p>
    The Gradle users can declare the dependencies as
  </p>
<pre class="line-numbers  language-java"><code>dependencies {
    compile "org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticsearch.version}"
}  </code></pre>

  <p>
    Replace the <code>${elasticsearch.version}</code> as appropriate.
  </p>

    <h2 id="initialization">
      Initialization
    </h2>

  <p>
    The <code>RestHighLevelClient</code> is built on top of the REST low-level client builder. The following code will instantiate a low level <code>RestClientBuilder</code>.
  </p>
<pre class="line-numbers  language-java"><code>RestClientBuilder  restClientBuilder  = RestClient.builder(
    new HttpHost("localhost", 9200, "http"),
    new HttpHost("localhost", 9201, "http"));</code></pre>

  <p>
    If the Elasticsearch is secured with user name and password then we need to provide the credentials using the&nbsp;<code>CredentialsProvider</code> as shown below. After that we can set a callback that allows to modify the http client configuration.&nbsp;
  </p>
<pre class="line-numbers  language-java"><code>final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(
        &lt;elasticSearchUsername&gt;, &lt;elasticSearchPassword&gt;));
restClientBuilder.setHttpClientConfigCallback(new HttpClientConfigCallback() {
      @Override
      public HttpAsyncClientBuilder customizeHttpClient(
          HttpAsyncClientBuilder httpClientBuilder) {
        return httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
      }
    });
/*
Using the Java 8 syntax, we can replace the above code like this
builder.setHttpClientConfigCallback(
        httpClientBuilder -&gt; httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));
*/</code></pre>

  <p>
    After this we can initialize the&nbsp;<code>RestHighLevelClient</code> as follows
  </p>
<pre class="line-numbers  language-java"><code>RestHighLevelClient client = new RestHighLevelClient(restClientBuilder);</code></pre>

    <h2 id="usage">
      Usage
    </h2>

  <p>
    Each APIs in High Level REST Client can be called synchronously or asynchronously. In case of synchronous call it returns a response object. It can throw an <code>IOException</code> if either of the following occurs:
  </p>

  <ul>
    <li>The request times out.</li><li>The client fails to parse the REST response</li><li>There is no response coming back from the server<br></li>
  </ul>
<pre class="line-numbers  language-java"><code>SearchRequest searchRequest = new SearchRequest("posts");
searchRequest.source(searchSourceBuilder);
SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);  
</code></pre>

  <p>
    The following shows how to call a method asynchronously. We need to define an <code>ActionListener</code> which define how to handle the response and error if any. The following shows the code example for that:
  </p>
<pre class="line-numbers  language-java"><code>// Asynchronous call example
ActionListener&lt;SearchResponse&gt; listener = new ActionListener&lt;SearchResponse&gt;() {
    @Override
    public void onResponse(SearchResponse searchResponse) {
         //write the logic to parse the search response. 
    }

    @Override
    public void onFailure(Exception e) {
        //Code to handle the exception goes here.
    }
};
client.searchAsync(searchRequest, RequestOptions.DEFAULT, listener);

</code></pre>

  <p>
    Once we are done with the processing, the client can closed as follows:
  </p>
<pre class="line-numbers  language-java"><code>client.close();</code></pre>

  <p>
    A working code example is present in <a href="https://github.com/ahmadimt/elasticsearch_samples/tree/main/high_level_rest_client" target="_blank">this git repository</a>.
  </p>

    <h2 id="references">
      References
    </h2>

  <ul>
    <li>https://github.com/ahmadimt/elasticsearch_samples/tree/main/high_level_rest_client<br></li><li>https://www.elastic.co/blog/state-of-the-official-elasticsearch-java-clients</li><li>https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high.html<br></li><li>https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-low.html<br></li><li>https://pixabay.com/illustrations/ball-round-cable-lan-connected-563972/<br></li>
  </ul>
<hr class="separator separator--dots" />

  <p>
    The classic <code>TransportClient</code> is deprecated in Elasticsearch 7.0 and will be removed in version 8.0.
  </p>
            ]]>
        </content>
    </entry>
</feed>
